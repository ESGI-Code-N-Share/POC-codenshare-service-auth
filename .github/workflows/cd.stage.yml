name: CD-stage-Docker

on:
  workflow_dispatch:
    inputs:
      release-description:
        description: 'Release Description'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Init Checkout
        uses: actions/checkout@v4

      - name: Fetch projet version
        id: fetch_project_version
        run: |
          sudo apt-get update && sudo apt-get install jq
          version=$(jq -r '.version' package.json)
          echo "$version"
      #          echo "version_project=$version" >> "$VERSION_PROJECT"
      #          echo "${{ steps.fetch_project_version.outputs.VERSION_PROJECT }}"
      

      # https://github.com/actions/create-release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.fetch_project_version.outputs.VERSION_PROJECT }}
          release_name: Release ${{ steps.fetch_project_version.outputs.VERSION_PROJECT }}
          body: |
            ${{ inputs.release-description }}
          draft: false
          prerelease: false

  build_image_and_deploy_image_on_docker_hub:
    needs: create_release  # Failed if create_release failed
    runs-on: ubuntu-latest

    env:
      REPOSITORY: "melissaesgi/poc-auth"
      PATH_DOCKERFILE: "./Dockerfile"
      TEST: ${{ needs.create_release.outputs.VERSION_PROJECT }}

    steps:
      - name: test
        run: echo ${{ needs.create_release.outputs.version }}

#      # https://github.com/actions/checkout
#      - uses: actions/checkout@v4
#
#      - name: Build the Docker image
#        run: docker build . --file Dockerfile --tag poc-auth:$(date +%s)
#
#      # https://github.com/docker/login-action
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_HUB_LOGIN }}
#          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
#
#      - name: Fetch projet version
#        id: fetch_project_version
#        run: |
#          sudo apt-get update && sudo apt-get install jq
#          version=$(jq -r '.version' package.json)
#          echo "$version"
#          echo "::set-output name=version::$version"
#
#      # https://github.com/docker/build-push-action
#      - name: Push Docker image with release version
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ${{ env.PATH_DOCKERFILE }}
#          push: true
#          tags: ${{ env.REPOSITORY }}:${{ steps.fetch_project_version.outputs.version }}
#
#      - name: Push Docker image with latest version
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ${{ env.PATH_DOCKERFILE }}
#          push: true
#          tags: ${{ env.REPOSITORY }}:stage-latest
#
#      - name: Deploy on render (stage)
#        env:
#          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
#        run: |
#          curl "$deploy_url"
